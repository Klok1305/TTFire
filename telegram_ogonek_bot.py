import os
import asyncio
import logging
from datetime import datetime, timedelta
import random
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ß—Ç–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ BOT_TOKEN
BOT_TOKEN = os.getenv('BOT_TOKEN', '').strip()
if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

# –ß—Ç–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ CHAT_IDS –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è (JSON-–º–∞—Å—Å–∏–≤)
raw_chat_ids = os.getenv('CHAT_IDS', '[]')
try:
    parsed = json.loads(raw_chat_ids)
    if not isinstance(parsed, list):
        raise ValueError
    CHAT_IDS = [str(x) for x in parsed]
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(CHAT_IDS)} Chat ID(s)")
except Exception:
    logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ CHAT_IDS. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ JSON-–º–∞—Å—Å–∏–≤")
    exit(1)

# –ü–æ—Ä—Ç –¥–ª—è webhook
PORT = int(os.getenv('PORT', 8000))

class OgonekBot:
    def __init__(self):
        self.scheduler = AsyncIOScheduler()
        self.app = None
        self.users_state = {}
        self.chat_ids = CHAT_IDS

    def get_user_state(self, chat_id):
        key = str(chat_id)
        if key not in self.users_state:
            self.users_state[key] = {
                'ogonek_alive': True,
                'last_response_time': None,
                'reminders_paused_until': None
            }
        return self.users_state[key]

    def update_user_state(self, chat_id, **kwargs):
        state = self.get_user_state(chat_id)
        state.update(kwargs)
        self.users_state[str(chat_id)] = state

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        if str(chat_id) not in self.chat_ids:
            await update.message.reply_text(
                f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n–í–∞—à Chat ID: `{chat_id}`", parse_mode='Markdown'
            )
            return

        self.update_user_state(chat_id, ogonek_alive=True, last_response_time=None, reminders_paused_until=None)
        await update.message.reply_text(
            "üî• –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!\n"
            "‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: 9:00‚Äì00:59 (–∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞)\n"
            "üåô –ù–æ—á—å: 1:00‚Äì8:59 (—Ç–∏—à–∏–Ω–∞)\n\n"
            "üìã –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:\n"
            "‚Ä¢ '–î–∞' ‚Üí –æ–≥–æ–Ω–µ–∫ —É–º–µ—Ä, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞–≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\n"
            "‚Ä¢ '–ù–µ—Ç' ‚Üí –æ–≥–æ–Ω–µ–∫ –∂–∏–≤, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–æ –∑–∞–≤—Ç—Ä–∞ –≤ 9:00\n"
            "‚Ä¢ '–ï—â–µ –Ω–µ—Ç' ‚Üí –æ–≥–æ–Ω–µ–∫ –≤ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞\n\n"
            "üõ†Ô∏è –ö–æ–º–∞–Ω–¥—ã:\n"
            "/start ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
            "/stop ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
            "/status ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n"
            "/revive ‚Äî –≤–æ—Å–∫—Ä–µ—Å–∏—Ç—å –æ–≥–æ–Ω–µ–∫\n"
            "/mychatid ‚Äî —É–∑–Ω–∞—Ç—å —Å–≤–æ–π Chat ID",
            parse_mode='Markdown'
        )

    async def mychatid_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        await update.message.reply_text(
            f"üÜî –í–∞—à Chat ID: `{chat_id}`", parse_mode='Markdown'
        )

    async def stop_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        if str(chat_id) not in self.chat_ids:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        self.update_user_state(chat_id, ogonek_alive=False, reminders_paused_until=None)
        await update.message.reply_text("‚èπÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Ä—É—á–Ω—É—é.")

    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        if str(chat_id) not in self.chat_ids:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return

        state = self.get_user_state(chat_id)
        hour = datetime.now().hour

        text = "üî• **–°—Ç–∞—Ç—É—Å –æ–≥–æ–Ω—å–∫–∞:**\n"
        text += "‚úÖ –û–≥–æ–Ω–µ–∫ –∂–∏–≤\n" if state['ogonek_alive'] else "üíÄ –û–≥–æ–Ω–µ–∫ –º–µ—Ä—Ç–≤\n"
        if state['last_response_time']:
            text += f"üïê –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç: {state['last_response_time'].strftime('%d.%m.%Y %H:%M')}\n"
        else:
            text += "üïê –û—Ç–≤–µ—Ç–æ–≤ –µ—â–µ –Ω–µ –±—ã–ª–æ\n"
        if state['reminders_paused_until']:
            text += f"‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–æ: {state['reminders_paused_until'].strftime('%d.%m.%Y %H:%M')}\n"

        if 1 <= hour < 9:
            text += "üåô –°–µ–π—á–∞—Å —Ç–∏—à–∏–Ω–∞ (1:00‚Äì8:59), –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è"
        else:
            if state['ogonek_alive'] and not state['reminders_paused_until']:
                text += "‚òÄÔ∏è –í—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç"
            elif state['reminders_paused_until']:
                text += "‚è∏Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –ø–∞—É–∑–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è"
            else:
                text += "üíÄ –û–≥–æ–Ω–µ–∫ –º–µ—Ä—Ç–≤, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"

        await update.message.reply_text(text, parse_mode='Markdown')

    async def revive_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        if str(chat_id) not in self.chat_ids:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        self.update_user_state(chat_id, ogonek_alive=True, reminders_paused_until=None)
        await update.message.reply_text("üî• –û–≥–æ–Ω–µ–∫ –≤–æ—Å–∫—Ä–µ—à–µ–Ω! –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω—ã.")

    async def send_ogonek_message(self):
        now = datetime.now()
        hour = now.hour
        if 1 <= hour < 9:
            logger.info(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤ {hour}:00 (—Ç–∏—à–∏–Ω–∞)")
            return

        keyboard = [[
            InlineKeyboardButton("–°–¥–æ—Ö üò¢", callback_data='yes'),
            InlineKeyboardButton("–ñ–∏–≤–µ—Ç üéâ", callback_data='no'),
            InlineKeyboardButton("–ü—Ä–æ–¥–ª—é ü§û", callback_data='not_yet')
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        for cid in self.chat_ids:
            try:
                state = self.get_user_state(cid)
                if state['reminders_paused_until'] and now < state['reminders_paused_until']:
                    continue
                if state['reminders_paused_until'] and now >= state['reminders_paused_until']:
                    self.update_user_state(cid, reminders_paused_until=None)
                if not state['ogonek_alive']:
                    continue
                await self.app.bot.send_message(chat_id=int(cid), text="üî• –Ø –Ω–∞–¥–µ—é—Å—å –æ–≥–æ–Ω–µ–∫ –∂–∏–≤?", reply_markup=reply_markup)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {cid}: {e}")

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        cid = query.message.chat_id
        if str(cid) not in self.chat_ids:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
        self.update_user_state(cid, last_response_time=datetime.now())
        now = datetime.now()
        emojis = random.sample(["üåü","‚ú®","üí´","üéà","üéä","üéâ","üåà","ü¶Ñ","üé™","üé≠","üé®","üéØ"], 3)
        if query.data == 'yes':
            self.update_user_state(cid, ogonek_alive=False, reminders_paused_until=None)
            response = "üò≠ –ö–∞–∫–∞—è –∫–æ—Ä–æ—Ç–∫–∞—è –±—ã–ª–∞ —É –Ω–µ–≥–æ –∂–∏–∑–Ω—å... –ü–æ–∫–æ–π—Å—è —Å –º–∏—Ä–æ–º, –º–∞–ª–µ–Ω—å–∫–∏–π –æ–≥–æ–Ω–µ–∫ üïØÔ∏èüíî\n\n‚èπÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞."
        elif query.data == 'no':
            next_day_9am = (now + timedelta(days=1)).replace(hour=9, minute=0, second=0, microsecond=0)
            self.update_user_state(cid, ogonek_alive=True, reminders_paused_until=next_day_9am)
            response = f"üéâ –£–†–ê! –û–≥–æ–Ω–µ–∫ –∂–∏–≤ –∏ –∑–¥–æ—Ä–æ–≤! –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–æ {next_day_9am.strftime('%d.%m.%Y %H:%M')}"
        elif query.data == 'not_yet':
            self.update_user_state(cid, ogonek_alive=True)
            emoji_string = " ".join(emojis)
            response = f"üôè –ï—â–µ –Ω–µ —É–±–∏–ª(–∞) {emoji_string}\n\n‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞."
        else:
            response = "‚ùì –ù–µ–ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç."
        original = query.message.text or ""
        await query.edit_message_text(f"{original}\n\nüí¨ {response}")

    async def setup_scheduler(self):
        self.scheduler.add_job(self.send_ogonek_message, trigger=IntervalTrigger(hours=3), id='ogonek_reminder')
        now = datetime.now()
        if not (1 <= now.hour < 9):
            await self.send_ogonek_message()

    def run(self):
        self.app = Application.builder().token(BOT_TOKEN).build()
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("mychatid", self.mychatid_command))
        self.app.add_handler(CommandHandler("stop", self.stop_command))
        self.app.add_handler(CommandHandler("status", self.status_command))
        self.app.add_handler(CommandHandler("revive", self.revive_command))
        self.app.add_handler(CallbackQueryHandler(self.button_callback))
        self.scheduler.start()
        asyncio.get_event_loop().run_until_complete(self.setup_scheduler())
        logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –¥–ª—è {len(self.chat_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
        self.app.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            webhook_url=f"https://{os.getenv('RAILWAY_PUBLIC_DOMAIN', 'localhost')}/{BOT_TOKEN}",
            url_path=BOT_TOKEN
        )


def main():
    bot = OgonekBot()
    bot.run()


if __name__ == '__main__':
    main()

# requirements.txt:
# python-telegram-bot[webhooks]==20.7
# apscheduler==3.10.4
