import asyncio
import logging
from datetime import datetime, timedelta
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
BOT_TOKEN = "–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê"

# ID —á–∞—Ç–∞, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ–ª—É—á–∏—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ @userinfobot)
CHAT_ID = "–í–ê–®_CHAT_ID"

class OgonekBot:
    def __init__(self):
        self.scheduler = AsyncIOScheduler()
        self.app = None
        self.ogonek_alive = True  # –°—Ç–∞—Ç—É—Å –æ–≥–æ–Ω—å–∫–∞ (True - –∂–∏–≤, False - –º–µ—Ä—Ç–≤)
        self.last_response_time = None  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
        self.reminders_paused_until = None  # –í—Ä–µ–º—è –¥–æ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–≥–æ–Ω—å–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
        self.ogonek_alive = True
        self.last_response_time = None
        self.reminders_paused_until = None
        
        await update.message.reply_text(
            "üî• –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:\n\n"
            "‚è∞ **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:** 8:00-00:00 (–∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞)\n"
            "üåô **–ù–æ—á—å:** 00:00-8:00 (—Ç–∏—à–∏–Ω–∞)\n\n"
            "üìã **–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:**\n"
            "‚Ä¢ **'–î–∞'** ‚Üí –æ–≥–æ–Ω–µ–∫ —É–º–µ—Ä, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞–≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\n"
            "‚Ä¢ **'–ù–µ—Ç'** ‚Üí –æ–≥–æ–Ω–µ–∫ –∂–∏–≤, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–æ –∑–∞–≤—Ç—Ä–∞ –≤ 8:00\n"  
            "‚Ä¢ **'–ï—â–µ –Ω–µ—Ç'** ‚Üí –æ–≥–æ–Ω–µ–∫ –≤ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞\n\n"
            "üõ†Ô∏è **–ö–æ–º–∞–Ω–¥—ã:**\n"
            "/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
            "/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
            "/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n"
            "/revive - –≤–æ—Å–∫—Ä–µ—Å–∏—Ç—å –æ–≥–æ–Ω–µ–∫"
        )
    
    async def stop_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop"""
        self.ogonek_alive = False
        self.reminders_paused_until = None
        await update.message.reply_text("‚èπÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Ä—É—á–Ω—É—é.")
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        status_text = "üî• **–°—Ç–∞—Ç—É—Å –æ–≥–æ–Ω—å–∫–∞:**\n"
        if self.ogonek_alive:
            status_text += "‚úÖ –û–≥–æ–Ω–µ–∫ –∂–∏–≤\n"
        else:
            status_text += "üíÄ –û–≥–æ–Ω–µ–∫ –º–µ—Ä—Ç–≤\n"
        
        if self.last_response_time:
            status_text += f"üïê –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç: {self.last_response_time.strftime('%d.%m.%Y %H:%M')}\n"
        else:
            status_text += "üïê –û—Ç–≤–µ—Ç–æ–≤ –µ—â–µ –Ω–µ –±—ã–ª–æ\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—É–∑–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        if self.reminders_paused_until:
            status_text += f"‚è∏Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–æ: {self.reminders_paused_until.strftime('%d.%m.%Y %H:%M')}\n"
        
        current_hour = datetime.now().hour
        if 0 <= current_hour < 8:
            status_text += "üåô –°–µ–π—á–∞—Å –Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è (00:00-08:00), –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è"
        else:
            if self.ogonek_alive and not self.reminders_paused_until:
                status_text += "‚òÄÔ∏è –í—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (08:00-00:00), –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç"
            elif self.reminders_paused_until:
                status_text += "‚è∏Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –ø–∞—É–∑–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è"
            else:
                status_text += "üíÄ –û–≥–æ–Ω–µ–∫ –º–µ—Ä—Ç–≤, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        
        await update.message.reply_text(status_text)
    
    async def revive_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /revive - –≤–æ—Å–∫—Ä–µ—à–µ–Ω–∏–µ –æ–≥–æ–Ω—å–∫–∞"""
        self.ogonek_alive = True
        self.reminders_paused_until = None
        await update.message.reply_text("üî• –û–≥–æ–Ω–µ–∫ –≤–æ—Å–∫—Ä–µ—à–µ–Ω! –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
        logger.info("–û–≥–æ–Ω–µ–∫ –≤–æ—Å–∫—Ä–µ—à–µ–Ω –∫–æ–º–∞–Ω–¥–æ–π /revive")
    
    async def send_ogonek_message(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞"""
        current_time = datetime.now()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è - –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å 00:00 –¥–æ 8:00
        if 0 <= current_time.hour < 8:
            logger.info(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {current_time.hour}:00 (–Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è)")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if self.reminders_paused_until and current_time < self.reminders_paused_until:
            logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–æ {self.reminders_paused_until}")
            return
        
        # –ï—Å–ª–∏ –Ω–∞—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –¥–µ–Ω—å, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞—É–∑—É
        if self.reminders_paused_until and current_time >= self.reminders_paused_until:
            self.reminders_paused_until = None
            logger.info("–ü–∞—É–∑–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–±—Ä–æ—à–µ–Ω–∞, –Ω–æ–≤—ã–π –¥–µ–Ω—å –Ω–∞—á–∞–ª—Å—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–≥–æ–Ω—å–∫–∞ - –µ—Å–ª–∏ –º–µ—Ä—Ç–≤, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        if not self.ogonek_alive:
            logger.info("–û–≥–æ–Ω–µ–∫ –º–µ—Ä—Ç–≤, —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è")
            return
        
        keyboard = [
            [
                InlineKeyboardButton("–î–∞ üò¢", callback_data='yes'),
                InlineKeyboardButton("–ù–µ—Ç üéâ", callback_data='no'),
                InlineKeyboardButton("–ï—â–µ –Ω–µ—Ç ü§û", callback_data='not_yet')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            await self.app.bot.send_message(
                chat_id=CHAT_ID,
                text="üî• –Ø –Ω–∞–¥–µ—é—Å—å —Ç—ã –Ω–µ —É–±–∏–ª–∞ –æ–≥–æ–Ω–µ–∫",
                reply_markup=reply_markup
            )
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {datetime.now()}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
        self.last_response_time = datetime.now()
        
        # –°–ª—É—á–∞–π–Ω—ã–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ "–µ—â–µ –Ω–µ—Ç"
        random_emojis = ["üåü", "‚ú®", "üí´", "üéà", "üéä", "üéâ", "üåà", "ü¶Ñ", "üé™", "üé≠", "üé®", "üéØ"]
        
        if query.data == 'yes':
            # –û–≥–æ–Ω–µ–∫ —É–º–µ—Ä - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞–≤—Å–µ–≥–¥–∞
            self.ogonek_alive = False
            self.reminders_paused_until = None
            response = "üò≠ –ö–∞–∫–∞—è –∫–æ—Ä–æ—Ç–∫–∞—è –±—ã–ª–∞ —É –Ω–µ–≥–æ –∂–∏–∑–Ω—å... –ü–æ–∫–æ–π—Å—è —Å –º–∏—Ä–æ–º, –º–∞–ª–µ–Ω—å–∫–∏–π –æ–≥–æ–Ω–µ–∫ üïØÔ∏èüíî\n\n‚èπÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞."
            logger.info("–û–≥–æ–Ω–µ–∫ —É–º–µ—Ä, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞")
            
        elif query.data == 'no':
            # –û–≥–æ–Ω–µ–∫ –∂–∏–≤ –∏ –∑–¥–æ—Ä–æ–≤ - –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
            self.ogonek_alive = True
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è –≤ 8:00
            current_time = datetime.now()
            next_day_8am = (current_time + timedelta(days=1)).replace(hour=8, minute=0, second=0, microsecond=0)
            self.reminders_paused_until = next_day_8am
            
            response = f"üéâ –£–†–ê! –û–≥–æ–Ω–µ–∫ –∂–∏–≤–µ—Ç –∏ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–µ—Ç! üî•‚ú® –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!\n\n‚è∏Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–æ –∑–∞–≤—Ç—Ä–∞ –≤ 8:00 ({next_day_8am.strftime('%d.%m.%Y %H:%M')})"
            logger.info(f"–û–≥–æ–Ω–µ–∫ –∂–∏–≤, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–æ {next_day_8am}")
            
        elif query.data == 'not_yet':
            # –û–≥–æ–Ω–µ–∫ –µ—â–µ –∂–∏–≤, –Ω–æ –≤ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç—Å—è
            self.ogonek_alive = True
            emoji_selection = random.sample(random_emojis, 3)
            emoji_string = " ".join(emoji_selection)
            response = f"üôè –ù–µ —É–±–µ–π –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ {emoji_string}\n\n‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞"
            logger.info("–û–≥–æ–Ω–µ–∫ –µ—â–µ –∂–∏–≤, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç—Å—è")
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è—è –æ—Ç–≤–µ—Ç
        original_text = query.message.text
        new_text = f"{original_text}\n\nüí¨ {response}"
        
        try:
            await query.edit_message_text(text=new_text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def setup_scheduler(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞"""
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞
        self.scheduler.add_job(
            self.send_ogonek_message,
            trigger=IntervalTrigger(hours=3),
            id='ogonek_reminder',
            name='Ogonek Reminder',
            replace_existing=True
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É
        await self.send_ogonek_message()
        
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –°–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞.")
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.app = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("stop", self.stop_command))
        self.app.add_handler(CommandHandler("status", self.status_command))
        self.app.add_handler(CommandHandler("revive", self.revive_command))
        self.app.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        self.scheduler.start()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        await self.setup_scheduler()
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        await self.app.run_polling(drop_pending_updates=True)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if BOT_TOKEN == "–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê" or CHAT_ID == "–í–ê–®_CHAT_ID":
        print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ BOT_TOKEN –∏ CHAT_ID –≤ –∫–æ–¥–µ!")
        print("1. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ —É @BotFather")
        print("2. –ü–æ–ª—É—á–∏—Ç–µ CHAT_ID —á–µ—Ä–µ–∑ @userinfobot")
        return
    
    bot = OgonekBot()
    try:
        await bot.run()
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())

# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (requirements.txt):
# python-telegram-bot==20.7
# apscheduler==3.10.4